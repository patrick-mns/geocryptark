var geocryptark=function(e){"use strict";let t,n,r;(async()=>{t=await(async()=>{if("undefined"!=typeof window&&window.crypto)return window.crypto;const{webcrypto:e}=await import("crypto");return e})(),n=await(async()=>{if("undefined"!=typeof window&&window.TextEncoder)return window.TextEncoder;const{TextEncoder:e}=await import("util");return e})(),r=await(async()=>{if("undefined"!=typeof window&&window.TextDecoder)return window.TextDecoder;const{TextDecoder:e}=await import("util");return e})()})();const a=(e,t)=>{if(e instanceof Uint8Array)return e;if("string"==typeof e){if("base64"===t){const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return n}return(new n).encode(e)}return new Uint8Array(e)},i=(e,t)=>{const n=e instanceof Uint8Array?e:new Uint8Array(e);if("base64"===t){let e="";for(let t=0;t<n.length;t++)e+=String.fromCharCode(n[t]);return btoa(e)}return(new r).decode(n)};function o(e){return i(e,"base64")}function c(e,t){return!(e<-90||e>90)&&!(t<-180||t>180)}async function s(e,r,a,i){if(!c(e,r))throw new Error("Invalid coordinates: latitude must be between -90 and 90, longitude must be between -180 and 180");const s=new n,w=JSON.stringify({lat:e,lng:r})+a+i;return o(await t.subtle.digest("SHA-256",s.encode(w)))}async function w(e,r){const a=new n,i=await t.subtle.importKey("raw",a.encode(e),"PBKDF2",!1,["deriveKey"]);return t.subtle.deriveKey({name:"PBKDF2",salt:a.encode(r),iterations:1e5,hash:"SHA-256"},i,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}async function d(e,r){const a=t.getRandomValues(new Uint8Array(12)),i="string"==typeof e?(new n).encode(e):e,o=await t.subtle.encrypt({name:"AES-GCM",iv:a},r,i);return{encrypted:new Uint8Array(o),iv:a}}async function y(e,r,a){const i=new n,o=await t.subtle.importKey("raw",i.encode(r+a),"PBKDF2",!1,["deriveKey"]),c=await t.subtle.deriveKey({name:"PBKDF2",salt:i.encode(a),iterations:1e5,hash:"SHA-256"},o,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),s=new Uint8Array(12),w=(new n).encode(e),d=await t.subtle.encrypt({name:"AES-GCM",iv:s},c,w);return{encrypted:new Uint8Array(d),iv:s}}return e.base64ToBuffer=function(e){return a(e,"base64")},e.bufferToBase64=o,e.deriveKey=w,e.encryptFirstLayer=y,e.encryptWithKey=d,e.generateGeoHash=s,e.multiKeyEncrypt=async function(e,n,r,a){for(const{lat:e,lng:t}of n)if(!c(e,t))throw new Error(`Invalid coordinates in list: latitude must be between -90 and 90, longitude must be between -180 and 180. Got: lat=${e}, lng=${t}`);const i=t.getRandomValues(new Uint8Array(32)),u=await t.subtle.importKey("raw",i,"AES-GCM",!0,["encrypt","decrypt"]),{encrypted:f,iv:l}=await y(e,a,r),{encrypted:p,iv:b}=await d(f,u),g=[];for(const{lat:e,lng:t}of n){const n=await s(e,t,r,a),c=await w(n,r),{encrypted:y,iv:u}=await d(i,c);g.push({wrappedKey:o(y),keyIv:o(u)})}return{salt:r,data:o(p),iv:o(b),keys:g}},e}({});
//# sourceMappingURL=geocryptark.min.js.map
